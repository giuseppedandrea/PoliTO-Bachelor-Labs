Laurea in Ingegneria Informatica
Corso di Sistemi Operativi
Esercizi proposti per il laboratorio
 
Esercitazione di laboratorio numero 03
--------------------------------------

Esercizio 01
Analisi di programmi concorrenti
--------------------------------

Rappresentare il grafo di controllo del flusso (CFG)
e l'albero di generazione dei processi dei seguenti
tratti di codice.
Indicare inoltre l'output prodotto su video.
Verificare il risultato predetto tramite esecuzione.

A.
for (i=1; i<=2; i++) {
  if (!fork ())
    printf ("%d\n", i);
}
printf ("%d\n", i);

- CFG:
           P
          / \
         /   \
        /     \
       /       \
      P        F1
     / \       / \
    /   \     /   \
   P    F2   F1   F11

- GENERAZIONE DEI PROCESSI:

  --------P-------- 
  |               |
  |               |
  F1              F2
  |
  |
  F11


- OUTPUT:
3 // P
2 // F2
3 // F2
1 // F1
3 // F1
2 // F11
3 // F11


B.
for(i=3; i>1; i--) {
  if (fork ())
    printf ("%d\n", i);
}
printf ("%d\n", i);

- CFG:
           P
          / \
         /   \
        /     \
       /       \
      P        F1
     / \       / \
    /   \     /   \
   P    F2   F1   F11

- GENERAZIONE DEI PROCESSI:

  --------P-------- 
  |               |
  |               |
  F1              F2
  |
  |
  F11


- OUTPUT:
3 // P
2 // P
1 // P
1 // F2
2 // F1
1 // F1
1 // F11

C.
for (i=0; i<2; i++) {
  if (fork ())
    fork ();
}
printf ("%d\n", i);

- CFG:
                ----------------P----------------
                |                               |
                |                               |
        --------P--------               --------F1--------
        |               |               |                |
        |               |               |                |
    ----P----       ----F2----      ----F1----           F11
    |       |       |        |      |        |
    |       |       |        |      |        |
  --P--     F3    --F2--     F21    F1       F12
  |   |           |    |
  |   |           |    |
  P   F4          F2   F22

- GENERAZIONE DEI PROCESSI:

      ----------------P---------------- 
      |          |         |          |
      |          |         |          |
    --F1--     --F2--      F3         F4   
    |    |     |    |
    |    |     |    |
    F11  F12   F21  F22

- OUTPUT:
2 // P
2 // F4
2 // F3
2 // F2
2 // F22
2 // F21
2 // F1
2 // F12
2 // F11

D.
for (i=2; i>=1; i--) {
  if (!fork ())
    printf ("%d\n", -i);
  else
    printf ("%d\n", i);
}

- CFG:
           P
          / \
         /   \
        /     \
       /       \
      P        F1
     / \       / \
    /   \     /   \
   P    F2   F1   F11

- GENERAZIONE DEI PROCESSI:

  --------P-------- 
  |               |
  |               |
  F1              F2
  |
  |
  F11

- OUTPUT:
2  // P
1  // P
-1 // F2
-2 // F1
1  // F1
-1 // F11

Esercizio 02
System call fork e comandi di shell per processi
------------------------------------------------

Un programma riceve due valori interi sulla riga di comando,
denominati n e t.
Il programma (processo padre) deve eseguire 2 figli e terminare.
Ciascun figlio deve eseguire a sua volta due figli e terminare.
Il procedimento deve andare avanti sino a quando sono in esecuzione
i 2^n processi sulle foglie dell'albero.
Questi ultimi aspettano per t secondi e visualizzano (a video)
un messaggio di terminazione.
Si noti che ogni processo (ad albero) ne esegue altri due.
Solo quelli sulle foglie dell'albero dormono e visualizzano un
messaggio.
Qual e' l'ordine di terminazione dei processi?
Non e' predicibile ma dipende da come lo scheduler esegue i processi
E' sempre lo stesso?
No
Come si possono riconoscere (ppid)?
I ppid, essendo i padri delle foglie morti, corrispondono tutti al processo init
che li ha ereditati. Non e' possibile riconoscerli attraverso il ppid.

Una volta eseguito il programma:
A. cercare il pid dei vari processi con il comando ps
   - dalla stessa shell
   - da un'altra shell
B. terminare l'esecuzione di alcuni processi
   con il comando kill eseguito
   - dalla stessa shell
   - da un'altra shell



Esercizio 03
Grafo di precedenza
-------------------

Utilizzando le system call fork e wait, realizzare il seguente
grafo di precedenza.

        P1
       /  \ 
      /    \ 
    P2      P3
    /\      /\
   /  \    /  \
 P4   P5  |   P6
   \  /    \  /
    \/      \/
    P7      P8
      \    /
       \  / 
        P9

Si osservi che tutti gli archi sono orientati verso il basso.
Ogni processo Pi corrisponda a un messaggio di stampa
(si stampi la stringa "Pi" e il PID del processo).

Verificare le precedenza siano rispettate inserendo delle
system call sleep nei vari rami del programma.

